enclave {
    from "sgx_tstdc.edl" import *;
    from "utils.edl" import *;

    include "../common/common.h"
    include "sgx_tseal.h"

    trusted {
        // deposit
        public int ecall_bitcoin_deposit([user_check] const bitcoin_deposit_t * deposit);

        // fairness protocol
        public int onMessageFromFairnessLeader([user_check] const unsigned char* tx, size_t size);
        public int onAckFromFairnessFollower([user_check] const unsigned char* ack, size_t size);

        // tx_1 committed on chain
        public int onTxOneCommitted([user_check] const merkle_proof_t* merkle_proof);

        // fairness protocol: setup membership
        public int addFairnessFollower([in,string] const char* hostname, uint16_t port, [in,size=32] const uint8_t* pubkey);
        public int removeFairnessFollower([in,string] const char* hostname, uint16_t port);
        public int setLeader([in,string] const char* hostname, uint16_t port, [in,size=32] const uint8_t* pubkey);
        // TODO: need to add secret key from sealed material
        public int setSelf(int is_leader, [in,string] const char* hostname, uint16_t port, [in,size=32] const uint8_t* pubkey);


        // testing functions
        public int enclaveTest();
        public int simulate_leader();
        public int merkle_proof_verify([user_check] const merkle_proof_t* proof);

        // state update
        public int ecall_append_block_to_fifo([in,string]const char *blockHeaderHex);

        // key management
        public size_t nacl_keygen_in_seal(
            [user_check] unsigned char *o_sealed, size_t cap_sealed_buf,
            [user_check] unsigned char *o_pubkey);
    };

    untrusted {
        // in = enclave -> app
        // https://download.01.org/intel-sgx/linux-2.1.2/docs/Intel_SGX_Developer_Reference_Linux_2.1.2_Open_Source.pdf
        int sendMessagesToFairnessFollower([in, string] const char* host, int port, [in, size=size] const unsigned char* msg, size_t size);
        int sendAckToFairnessLeader([in, string] const char* host, int port, [in, size=size] const unsigned char* msg, size_t size);

        // send tx_1
        int commitTxOne([in, size=size] const unsigned char* tx1, size_t size);
    };
};

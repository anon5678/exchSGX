enclave {
    from "mbedtls_sgx.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "utils.edl" import *;

    include "../common/ssl_context.h"
    include "../common/merkle_data.h"
    include "sgx_tseal.h"

    trusted {
        /* define ECALLs here. */
        public int ssl_conn_init(void);
        public void ssl_conn_teardown(void);
        public void ssl_conn_handle(long int thread_id, [in,out] thread_info_t* thread_info);

        public int ecall_append_block_to_fifo([in,string]const char *blockHeaderHex);

        // testing functions
        public int test_tls_client([in,string]const char* hostname, unsigned int port);
        public int enclaveTest();

        // key management
        public int rsa_keygen_in_seal(
            [in,string] const char* subject_name,
            [user_check] unsigned char *o_sealed, size_t cap_sealed,
            [user_check] unsigned char *o_pubkey, size_t cap_pubkey,
            [user_check] unsigned char *o_csr, size_t cap_csr);

        public int unseal_secret_and_leak_public_key(
            [in, size=secret_len] const sgx_sealed_data_t *secret,
            size_t secret_len,
            [user_check] unsigned char *pubkey,
            size_t cap_pubkey);

        // id management
        public int provision_rsa_id(
            [in, size=secret_len] const unsigned char* sealed_rsa_secret_key,
            size_t secret_len,
            [in, string] const char* cert_pem);

        public int query_rsa_pubkey(
            [user_check] unsigned char *pubkey,
            size_t cap_pubkey,
            [user_check] char* cert_pem,
            size_t cap_cert_pem);

        // merkle proof test
        public int merkle_proof_verify(
            [user_check] const merkle_proof_t* proof);


        //
        public int ecall_deposit(
            [user_check] const merkle_proof_t* merkle_proof,
            [user_check] const char* block_hash_hex,
            [user_check] const char* public_key_pem);
    };

    untrusted {
        /* define OCALLs here. */
    };
};

/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_EXCH_RPC_ABSCLIENT_H_
#define JSONRPC_CPP_STUB_EXCH_RPC_ABSCLIENT_H_

#include <jsonrpccpp/client.h>

namespace exch {
    namespace rpc {
        class AbsClient : public jsonrpc::Client
        {
            public:
                AbsClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

                bool appendBlock2FIFO(const std::string& param1) throw (jsonrpc::JsonRpcException)
                {
                    Json::Value p;
                    p.append(param1);
                    Json::Value result = this->CallMethod("appendBlock2FIFO",p);
                    if (result.isBool())
                        return result.asBool();
                    else
                        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
                }
                bool deposit(const Json::Value& param1, const std::string& param2) throw (jsonrpc::JsonRpcException)
                {
                    Json::Value p;
                    p.append(param1);
                    p.append(param2);
                    Json::Value result = this->CallMethod("deposit",p);
                    if (result.isBool())
                        return result.asBool();
                    else
                        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
                }
                bool distributeSettlementPkg(const std::string& param1) throw (jsonrpc::JsonRpcException)
                {
                    Json::Value p;
                    p.append(param1);
                    Json::Value result = this->CallMethod("distributeSettlementPkg",p);
                    if (result.isBool())
                        return result.asBool();
                    else
                        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
                }
                bool ackSettlementPkg(const std::string& param1) throw (jsonrpc::JsonRpcException)
                {
                    Json::Value p;
                    p.append(param1);
                    Json::Value result = this->CallMethod("ackSettlementPkg",p);
                    if (result.isBool())
                        return result.asBool();
                    else
                        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
                }

                bool ethSendOrder(const std::string& param1) throw (jsonrpc::JsonRpcException)
                {
                    Json::Value p;
                    p.append(param1);
                    Json::Value result = this->CallMethod("ethSendOrder",p);
                    if (result.isBool())
                        return result.asBool();
                    else
                        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
                }
                bool ethWithdraw(const std::string& param1) throw (jsonrpc::JsonRpcException)
                {
                    Json::Value p;
                    p.append(param1);
                    Json::Value result = this->CallMethod("ethWithdraw",p);
                    if (result.isBool())
                        return result.asBool();
                    else
                        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
                }
                bool ethSendProof(const std::string& param1) throw (jsonrpc::JsonRpcException)
                {
                    Json::Value p;
                    p.append(param1);
                    Json::Value result = this->CallMethod("ethSendProof",p);
                    if (result.isBool())
                        return result.asBool();
                    else
                        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
                }
                bool ethSendHeader(const std::string& param1) throw (jsonrpc::JsonRpcException)
                {
                    Json::Value p;
                    p.append(param1);
                    Json::Value result = this->CallMethod("ethSendHeader",p);
                    if (result.isBool())
                        return result.asBool();
                    else
                        throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
                }
        };

    }
}
#endif //JSONRPC_CPP_STUB_EXCH_RPC_ABSCLIENT_H_
